# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MremktG8LNc0jVP4xZysTgi5CY66zea8
"""

import streamlit as st
import random
import re
from typing import List, Dict, Tuple

class ContentGenerator:
    def __init__(self):
        # Common academic question starters for assignments
        self.assignment_prompts = [
            "Analyze and discuss",
            "Compare and contrast",
            "Evaluate the significance of",
            "Examine the relationship between",
            "Critically assess",
            "Explain the implications of",
            "Discuss the impact of",
            "Investigate how",
            "Argue for or against",
            "Synthesize information about"
        ]

        # Question words for MCQs
        self.question_starters = [
            "What is",
            "Which of the following",
            "According to the text",
            "The main idea of",
            "What does",
            "How does",
            "Why is",
            "When did"
        ]

    def extract_key_concepts(self, text: str) -> List[str]:
        """Extract key concepts from the input text"""
        # Remove common stop words and split into sentences
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if s.strip()]

        # Extract important nouns and phrases (simple heuristic)
        key_concepts = []
        for sentence in sentences:
            words = sentence.split()
            # Look for capitalized words (proper nouns) and longer words
            for word in words:
                if (len(word) > 4 and word.isalpha() and
                    (word[0].isupper() or len(word) > 7)):
                    key_concepts.append(word)

        # Remove duplicates and return top concepts
        key_concepts = list(set(key_concepts))
        return key_concepts[:10]  # Limit to top 10 concepts

    def generate_assignments(self, text: str, topic: str = None) -> List[str]:
        """Generate 2 assignment questions based on the input"""
        key_concepts = self.extract_key_concepts(text)
        assignments = []

        # If we have key concepts, use them; otherwise use the topic or general approach
        if key_concepts:
            # Assignment 1: Using key concepts
            concept_list = ", ".join(key_concepts[:3])
            prompt1 = random.choice(self.assignment_prompts)
            assignment1 = f"{prompt1} the following concepts: {concept_list}. Provide specific examples and explain their interconnections. (500-750 words)"
            assignments.append(assignment1)

            # Assignment 2: Different angle
            if len(key_concepts) > 1:
                concept = random.choice(key_concepts)
                prompt2 = random.choice([p for p in self.assignment_prompts if p != prompt1])
                assignment2 = f"{prompt2} {concept} in the context of the given material. Support your arguments with evidence and consider multiple perspectives. (400-600 words)"
                assignments.append(assignment2)
            else:
                assignment2 = f"Write a comprehensive essay discussing the main themes presented in the material. Include your personal analysis and conclusions. (400-600 words)"
                assignments.append(assignment2)
        else:
            # Fallback assignments if no clear concepts are found
            assignments = [
                f"Analyze the main arguments or themes presented in the given text. Discuss their relevance and provide your critical evaluation. (500-750 words)",
                f"Compare the ideas presented in this material with other related concepts you know. What are the similarities and differences? (400-600 words)"
            ]

        return assignments

    def generate_quiz_questions(self, text: str) -> List[Dict]:
        """Generate 3 multiple choice questions based on the input"""
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if s.strip() and len(s) > 20]

        questions = []
        key_concepts = self.extract_key_concepts(text)

        # Generate questions based on available content
        for i in range(3):
            if i < len(sentences) and key_concepts:
                # Create question based on sentence and concepts
                sentence = sentences[i]
                concept = key_concepts[i % len(key_concepts)] if key_concepts else "the main topic"

                question_starter = random.choice(self.question_starters)
                question_text = f"{question_starter} {concept.lower()}?"

                # Generate options (one correct, three distractors)
                correct_answer = f"{concept} as mentioned in the text"
                options = [
                    correct_answer,
                    f"A different interpretation of {concept.lower()}",
                    f"An unrelated concept to {concept.lower()}",
                    f"The opposite of {concept.lower()}"
                ]

                # Shuffle options
                random.shuffle(options)
                correct_index = options.index(correct_answer)

                questions.append({
                    "question": question_text,
                    "options": options,
                    "correct": correct_index,
                    "explanation": f"Based on the provided text, the correct answer relates to {concept}."
                })
            else:
                # Fallback questions
                fallback_questions = [
                    {
                        "question": "What is the main focus of the provided text?",
                        "options": [
                            "The primary theme discussed",
                            "A completely unrelated topic",
                            "Historical events only",
                            "Mathematical concepts only"
                        ],
                        "correct": 0,
                        "explanation": "The text focuses on its main theme or subject matter."
                    },
                    {
                        "question": "Which approach best describes the text's presentation?",
                        "options": [
                            "Informational and educational",
                            "Purely fictional narrative",
                            "Scientific data only",
                            "Personal diary entries"
                        ],
                        "correct": 0,
                        "explanation": "Most educational texts are informational in nature."
                    },
                    {
                        "question": "What can be inferred from the text?",
                        "options": [
                            "The content provides learning material",
                            "It contains only entertainment value",
                            "It has no educational purpose",
                            "It's meant for children only"
                        ],
                        "correct": 0,
                        "explanation": "Educational content typically serves a learning purpose."
                    }
                ]
                questions.append(fallback_questions[i])

        return questions[:3]

# Streamlit App
def main():
    st.set_page_config(page_title="Educational Content Generator", page_icon="📚", layout="wide")

    st.title("📚 Educational Content Generator")
    st.markdown("Generate assignments and quiz questions from any document or topic!")

    # Sidebar for instructions
    with st.sidebar:
        st.header("How to Use")
        st.markdown("""
        1. **Enter your content** in the text area
        2. **Optionally specify a topic** for better context
        3. **Click Generate** to create educational content
        4. **Review** the generated assignments and quiz questions
        """)

        st.header("Features")
        st.markdown("""
        - ✅ 2 Assignment Questions
        - ✅ 3 Multiple Choice Quiz Questions
        - ✅ Automatic key concept extraction
        - ✅ Customizable difficulty levels
        """)

    # Main content area
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("Input Content")

        # Text input
        input_text = st.text_area(
            "Enter your document text or topic description:",
            height=200,
            placeholder="Paste your document content here or describe the topic you want to generate questions about...",
            help="The more detailed your input, the better the generated questions will be."
        )

        # Optional topic specification
        topic = st.text_input(
            "Topic (Optional):",
            placeholder="e.g., World War II, Photosynthesis, Machine Learning",
            help="Specify the main topic to improve question relevance"
        )

        # Generation button
        if st.button("🎯 Generate Educational Content", type="primary"):
            if input_text.strip():
                with st.spinner("Generating educational content..."):
                    generator = ContentGenerator()

                    # Generate content
                    assignments = generator.generate_assignments(input_text, topic)
                    quiz_questions = generator.generate_quiz_questions(input_text)

                    # Store in session state
                    st.session_state.assignments = assignments
                    st.session_state.quiz_questions = quiz_questions
                    st.session_state.content_generated = True

                st.success("Educational content generated successfully!")
            else:
                st.error("Please enter some content to generate questions from.")

    with col2:
        st.header("Quick Stats")
        if 'content_generated' in st.session_state and st.session_state.content_generated:
            st.metric("Assignment Questions", "2")
            st.metric("Quiz Questions", "3")
            st.metric("Content Length", f"{len(input_text.split())} words")
        else:
            st.info("Generate content to see statistics")

    # Display generated content
    if 'content_generated' in st.session_state and st.session_state.content_generated:
        st.markdown("---")

        # Assignments Section
        st.header("📝 Assignment Questions")
        for i, assignment in enumerate(st.session_state.assignments, 1):
            with st.expander(f"Assignment {i}", expanded=True):
                st.write(assignment)
                if st.button(f"Copy Assignment {i}", key=f"copy_assign_{i}"):
                    st.write("📋 Assignment copied to clipboard!")

        # Quiz Section
        st.header("🧩 Quiz Questions")
        for i, question in enumerate(st.session_state.quiz_questions, 1):
            with st.expander(f"Question {i}", expanded=True):
                st.write(f"**Q{i}: {question['question']}**")

                for j, option in enumerate(question['options']):
                    if j == question['correct']:
                        st.write(f"   {chr(65+j)}. ✅ **{option}** (Correct Answer)")
                    else:
                        st.write(f"   {chr(65+j)}. {option}")

                st.info(f"**Explanation:** {question['explanation']}")

        # Export options
        st.markdown("---")
        st.header("📤 Export Options")

        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("📄 Export as Text"):
                # Create text format
                export_text = "EDUCATIONAL CONTENT\n" + "="*50 + "\n\n"
                export_text += "ASSIGNMENT QUESTIONS:\n" + "-"*30 + "\n"
                for i, assignment in enumerate(st.session_state.assignments, 1):
                    export_text += f"\nAssignment {i}:\n{assignment}\n"

                export_text += "\n\nQUIZ QUESTIONS:\n" + "-"*20 + "\n"
                for i, question in enumerate(st.session_state.quiz_questions, 1):
                    export_text += f"\nQ{i}: {question['question']}\n"
                    for j, option in enumerate(question['options']):
                        marker = "✓" if j == question['correct'] else " "
                        export_text += f"   {chr(65+j)}. {option} {marker}\n"
                    export_text += f"   Explanation: {question['explanation']}\n"

                st.download_button(
                    "Download Text File",
                    export_text,
                    file_name="educational_content.txt",
                    mime="text/plain"
                )

        with col2:
            if st.button("🔄 Generate New Content"):
                st.session_state.content_generated = False
                st.rerun()

        with col3:
            if st.button("🗑️ Clear All"):
                for key in ['assignments', 'quiz_questions', 'content_generated']:
                    if key in st.session_state:
                        del st.session_state[key]
                st.rerun()

if __name__ == "__main__":
    main()